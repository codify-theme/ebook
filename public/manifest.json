"use client"

import type React from "react"
import { useEffect, useRef, useState } from "react"
import ePub from "epubjs"
import { Button } from "@/components/ui/button"
import { ChevronLeft, ChevronRight, Home, Settings } from "lucide-react"

interface Book {
  id: number
  title_ar: string
  author_ar: string
  title_en?: string
  author_en?: string
  filename_ar: string
  filename_en?: string
}

interface BookReaderProps {
  book: Book
  onClose: () => void
}

const BookReader: React.FC<BookReaderProps> = ({ book, onClose }) => {
  const viewerRef = useRef<HTMLDivElement>(null)
  const [rendition, setRendition] = useState<any>(null)
  const [currentLocation, setCurrentLocation] = useState<string>("")
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string>("")

  useEffect(() => {
    const loadBook = async () => {
      if (!viewerRef.current) return

      setIsLoading(true)
      setError("")

      try {
        console.log("Loading book:", book)

        // Try different filename patterns
        const possibleFilenames = [
          book.filename_ar,
          book.filename_en,
          `${book.title_ar}_${book.author_ar}.epub`,
          `${book.title_en}_${book.author_en}.epub`,
        ].filter(Boolean)

        console.log("Trying filenames:", possibleFilenames)

        let bookPath = ""
        let loadSuccess = false

        // Try each possible filename
        for (const filename of possibleFilenames) {
          try {
            bookPath = `/epubs/${filename}`
            console.log(`Attempting to load: ${bookPath}`)

            // Test if file exists by making a HEAD request
            const response = await fetch(bookPath, { method: "HEAD" })
            if (response.ok) {
              console.log(`✅ File found: ${bookPath}`)
              loadSuccess = true
              break
            } else {
              console.log(`❌ File not found: ${bookPath} (Status: ${response.status})`)
            }
          } catch (err) {
            console.log(`❌ Error checking file: ${bookPath}`, err)
          }
        }

        if (!loadSuccess) {
          throw new Error(`Could not find EPUB file. Tried: ${possibleFilenames.join(", ")}`)
        }

        console.log(`📖 Loading book from: ${bookPath}`)

        const bookInstance = ePub(bookPath)
        const newRendition = bookInstance.renderTo(viewerRef.current, {
          width: "100%",
          height: "100%",
          spread: "none",
        })

        await newRendition.display()

        setRendition(newRendition)
        setIsLoading(false)

        console.log("✅ Book loaded successfully")

        // Set up location tracking
        newRendition.on("locationChanged", (location: any) => {
          setCurrentLocation(location.start.cfi)
        })
      } catch (err) {
        console.error("❌ Error loading book:", err)
        setError(err instanceof Error ? err.message : "Failed to load book")
        setIsLoading(false)
      }
    }

    loadBook()

    return () => {
      if (rendition) {
        rendition.destroy()
      }
    }
  }, [book])

  const goToPrevious = () => {
    if (rendition) {
      rendition.prev()
    }
  }

  const goToNext = () => {
    if (rendition) {
      rendition.next()
    }
  }

  if (error) {
    return (
      <div className="fixed inset-0 bg-white z-50 flex flex-col">
        <div className="flex items-center justify-between p-4 border-b">
          <Button onClick={onClose} variant="ghost" size="sm">
            <Home className="h-4 w-4 mr-2" />
            Back to Library
          </Button>
        </div>
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center max-w-md mx-auto p-6">
            <div className="text-red-500 text-6xl mb-4">📚</div>
            <h2 className="text-xl font-semibold mb-2">Unable to Load Book</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <div className="text-sm text-gray-500 mb-4">
              <p>
                <strong>Book:</strong> {book.title_ar || book.title_en}
              </p>
              <p>
                <strong>Author:</strong> {book.author_ar || book.author_en}
              </p>
              <p>
                <strong>Expected filename:</strong> {book.filename_ar}
              </p>
            </div>
            <Button onClick={onClose}>Return to Library</Button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 bg-white z-50 flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-white">
        <Button onClick={onClose} variant="ghost" size="sm">
          <Home className="h-4 w-4 mr-2" />
          Back to Library
        </Button>

        <div className="flex-1 text-center mx-4">
          <h1 className="font-semibold text-lg truncate">{book.title_ar || book.title_en}</h1>
          <p className="text-sm text-gray-600 truncate">{book.author_ar || book.author_en}</p>
        </div>

        <Button variant="ghost" size="sm">
          <Settings className="h-4 w-4" />
        </Button>
      </div>

      {/* Book Content */}
      <div className="flex-1 relative">
        {isLoading && (
          <div className="absolute inset-0 flex items-center justify-center bg-white">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">Loading book...</p>
              <p className="text-sm text-gray-500 mt-2">{book.title_ar || book.title_en}</p>
            </div>
          </div>
        )}
        <div ref={viewerRef} className="w-full h-full" />
      </div>

      {/* Navigation Controls */}
      {!isLoading && !error && (
        <div className="flex items-center justify-between p-4 border-t bg-white">
          <Button onClick={goToPrevious} variant="outline" size="sm">
            <ChevronLeft className="h-4 w-4 mr-2" />
            Previous
          </Button>

          <div className="text-sm text-gray-600">{/* You can add page info here if available */}</div>

          <Button onClick={goToNext} variant="outline" size="sm">
            Next
            <ChevronRight className="h-4 w-4 ml-2" />
          </Button>
        </div>
      )}
    </div>
  )
}

export default BookReader
